def open_account():



#함수 전달값, 반환값
#입금하는 함수
def open_account():
    print("새로운 계좌가 생성되었습니다.")

def deposit(balance, money): #입금 
    print("입금이 완료되었습니다. 잔액은 {0} 원입니다.".format(balance+money))
    return balance + money 


def withdraw(balance, money): #출금
    if balance >= money : #잔액이 출금보다 많으면
        print("출금이 완료되었습니다. 잔액은 {0}원입니다.".format(balance - money))
        return balance - money
    else:
        print("출금이 완료되지 않았습니다. 잔액은 {0}원입니다.".format(balance))
        return balance


def withdraw_night(balance, money) : #저녁에 출금
    commission = 100 #수수료 100원
    return commission, balance - money - commission        

balance = 0
balance = deposit(balance, 1000)
#balance = withdraw(balance, 500)
commission, balance = withdraw_night(balance, 500)
print("수수료 {0}원이며, 잔액은 {1}원입니다.".format(commission, balance))        


#기본값

#  def profile(name, age, main_lang):
#     print("이름 : {0}\t나이 : {1}\t주 사용 언어 : {2}" .format(name, age, main_lang))

# profile("유재석", 20, "파이썬")
# profile("김태호",25,"자바")   


#만약 같은 학교 같은 반일경우 나이, 언어는 적어줄 필요가 없다. 이 때 사용되는 것이 기본값이다.

def profile(name, age=17, main_lang="파이썬"):
    print("이름 : {0}\t나이 : {1}\t주 사용 언어 : {2}" .format(name, age, main_lang))


profile("유재석")
profile("김태호")



#키워드 값

def profile(name, age, main_lang):
    print(name, age, main_lang)


profile(name = "유재석",main_lang="파이썬",age=20)
profile(main_lang="자바", age=25, name="김태호")    



#가변 인자

def profile(name,age, lang1, lang2, lang3, lang4, lang5):
  print("이름 : {0}\t나이 : {1}\t".format(name, age), end="")
  print(lang1, lang2, lang3, lang4, lang5)

profile("유재석", 20, "Python", "Java", "C","C++","C#") 
profile("김태호", 25,"Kotlin", "Swift","","","")

#만약 2개밖에 할줄몰르면 뒷부분을 빈칸으로 함. 근데 매번 이 값을 입력할 수 없고, 중간에 할줄아는 언어가 늘어날 경우 즉, 변동사항이 생기는 경우에 매번 할 수 없기 때문에 가변인자를 사용함.


def profile(name,age, *language):
  print("이름 : {0}\t나이 : {1}\t".format(name, age), end="")
  for lang in language :
      print(lang, end=" ")
  print()

profile("유재석", 20, "Python", "Java", "C","C++","C#","JavaScript") 
profile("김태호", 25,"Kotlin", "Swift")

#lang1, lang2 ~~를 *language 로 바꾸고 for를 이용해 가변인자를 이용한다. 그러면 값이 바뀌어도 출력됨






#지역 변수, 전역변수 - 함수될때 만들어지고 호출이 끝나면 사라지는 것을 지역변수, 프로그램 어디서든지 부를 수 있는 변수를 전역변수

gun = 10

def checkpoint(soldiers): #경계근무
    gun = 20
    gun = gun-soldiers
    print("[함수 내] 남은 총 : {0}".format(gun))

print("전체 총 : {0}".format(gun))
checkpoint(2)     #2명이 경계 근무 나감 
print("남은 총 : {0}".format(gun))


#전역변수의 사용

gun = 10

def checkpoint(soldiers): #경계근무
    global gun #전역 공간에 있는 gun 사용
    gun = gun-soldiers
    print("[함수 내] 남은 총 : {0}".format(gun))

def checkpoint_ret(gun, soldiers):
    gun = gun - soldiers #여기서 계산한 값으로 실제 밖에 있는 gun 값이 바뀌지 않지만 return을 함으로써 바뀌어진 값을 외부로 던짐.
    print("[함수 내] 남은 총: {0}".format(gun))
    return gun #바뀌어진 값을 외부로 던짐.

print("전체 총 : {0}".format(gun))
gun = checkpoint_ret(gun,2)     #2명이 경계 근무 나감 
print("남은 총 : {0}".format(gun))




def std_weight(height, gender): #키 m단위 (실수)
    if gender == "남자":
        return height*height*22

    else:    
        return height*height*21


height = 175 #cm 단위
gender = "남자"
weight = round(std_weight(height/100, gender),2) #라운드함수를 이용해서 소수점 2번째 자리까지
print("키 {0} {1}의 표준 체중은 {2} kg 입니다.".format(height, gender,weight))

